//@author: David Gann
//@help: Normals Compression according to SphereMap Transform in this article http://aras-p.info/texts/CompactNormalStorage.html
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;
Texture2D tex2 <string uiname="Texture In 2";>;
Texture2D tex3 <string uiname="Texture In 3";>;


SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};

half2 encode (half3 n)
{
    half2 enc = normalize(n.xy) * (sqrt(-n.z*0.5+0.5));
    enc = enc*0.5+0.5;
    return enc;
}

float4 PS(psInput input) : SV_Target
{
	float4 c = texture2d.Sample(linearSampler,input.uv);
	float4 c2 = texture2d.Sample(linearSampler,input.uv);
	float4 c3 = texture2d.Sample(linearSampler,input.uv);
	float2 encoded_normal = encode(c.rgb);
	return float4(c2.r, encoded_normal.x, encoded_normal.y,c3.r);
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



